/**
 * 
 */
package com.backend.seaport.view.resource;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.backend.seaport.deal.service.ServiceService;
import com.backend.seaport.model.Services;
import com.backend.seaport.view.resource.vo.ServicesVo;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

/**
 * @author christian
 *
 */

@RestController
@CrossOrigin(origins = { "http://localhost:4200" })
@RequestMapping("/v1/api")
@Api(tags = "Services")
public class ServiceResources {

	private final ServiceService serviceService;

	public ServiceResources(ServiceService servicesService) {
		this.serviceService = servicesService;
	};

	@PostMapping("/services/create")
	@ApiOperation(value = "Create service", notes = "Service to crate a new service")
	@ApiResponses(value = { @ApiResponse(code = 201, message = "service create successfully"),
			@ApiResponse(code = 400, message = "Invalid request") })
	public ResponseEntity<Services> POSTServices(@RequestBody ServicesVo servicesVo) {
		Services services = new Services();

		try {
			services.setName(servicesVo.getName());

			return new ResponseEntity<>(this.serviceService.createService(services), HttpStatus.CREATED);
		} catch (Exception e) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
	};

	@PutMapping("/services/update/{id}")
	@ApiOperation(value = "update service", notes = "Service to update a service ")
	@ApiResponses(value = { @ApiResponse(code = 201, message = "service updated successfully"),
			@ApiResponse(code = 400, message = "Invalid request") })
	public ResponseEntity<Services> PUTService(@PathVariable("id") String id, ServicesVo servicesVo) {

		try {
			Services services = this.serviceService.findByS(id);
			if (services == null) return new ResponseEntity<>(HttpStatus.NOT_FOUND);

			services.setName(servicesVo.getName());

			return new ResponseEntity<>(this.serviceService.updateService(services), HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
	};

	@DeleteMapping("/services/delete/{id}")
	@ApiOperation(value = "delete service", notes = "Service to delete a service")
	@ApiResponses(value = { @ApiResponse(code = 201, message = "service deleted successfully"),
			@ApiResponse(code = 400, message = "Invalid request") })
	public void DELETEService(@PathVariable String id) {
		try {
			Services services = this.serviceService.findByS(id);
			if (services != null) this.serviceService.deleteService(services);
			
		} catch (Exception e) {
			// TODO: handle exception
		}
	};

	@GetMapping("/services")
	@ApiOperation(value = "to list services", notes = "Service to list all services")
	@ApiResponses(value = { @ApiResponse(code = 201, message = "services found"),
			@ApiResponse(code = 404, message = "services generated not found") })
	public ResponseEntity<List<Services>> GETService() {
		try {
			return ResponseEntity.ok(this.serviceService.findAllServices());
		} catch (Exception e) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
	};

	@GetMapping("/services/{id}")
	@ApiOperation(value = "to find service by id", notes = "Service to find a service generated by id")
	@ApiResponses(value = { @ApiResponse(code = 201, message = "services finded"),
			@ApiResponse(code = 404, message = "services generated not found") })
	public ResponseEntity<Services> GETIDservice(@PathVariable String id) {

		try {
			return ResponseEntity.ok(this.serviceService.findByS(id));
		} catch (Exception e) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}

	};
};
